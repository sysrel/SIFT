A Short Tutorial on How to Use SIFT
===================================

SIFT's executable is still named klee and will be located under the bin directory inside the 
build directory that you will need to create. Please refer to INSTALL.txt for the build 
instructions. Make sure to define the SIFT environment variable as we will be referring to it in 
the rest of this tutorial.

$ export SIFT=/path_to_klee_build_directory/bin/klee

SIFT inherits all the command-line options of PROMPT and KLEE and introduces additional ones 
including:

-async=true (WARNING: if async command is set to false, multithreaded analysis will not be 
performed !)

-num-explore-sel=N (N exploration steps will be performed)

-partition-infer-points=true/false 

   If partition-infer-points is set to true, interleaving points 
   will be partitioned based on common memory objects. This is 
   called mode COMMON. If set to false, all interleaving points 
   will be consider together. This is called mode ONE.

-apply-inferpoints-indiv=true/false 
 
   If apply-inferpoints-indiv is set to true, each interleaving 
   point will be considered separately. This is called mode SINGLE 
   and would be useful if a single context-switch is sufficient to 
   trigger the bug.
     
-conc-info=CONCURRENCY_INFO_STATS_FILE_NAME  

   The file will store detailed information of when each step starts, 
   the number of interleaving points, the number of partitions and 
   their sizes, whether errors found and the time of detecting the 
   bug, etc. Note that detailed information about the individual bugs 
   will be found under the relevant test file that is typically 
   generated by KLEE. SIFT extends these bug reports to show the 
   thread schedule and the states of the threads when the bug gets 
   detected. These test files will be located under klee-out directories.

-target-function-list=TARGET_FUNCTIONS_FILE_NAME 
  
   This will will contain a function name on each line and SIFT will 
   consider the callsites of these functions as property relevant. 
   Examples of such functions include free, abort, etc.

-static-relevance-depth=NUM_BASIC_BLOCK_DEPTH

  To identify callsites for target instructions and to infer property relevant 
  branch conditions, NUM_BASIC_BLOCK_DEPTH determines the number of basic 
  blocks to analyze starting from the untaken branch target.
  

-interleaving-point-info=PARTITION_INFO_FILE_NAME 

   This file will contain detailed information about interleaving points 
   and the associated information such as the corresponding LLVM instruction 
   and source file and line no information.

PROMPT commands that will be needed:

-prose-api-model=model_file_name  (PROMPT command)

KLEE commands that will be useful: 

-search=SEARCH_STRATEGY


We provide a running example, test.c, and the run scripts for each mode of 
execution (runCommon.sh, runOne.sh, and runSingle.sh).

Please refer to SIFTICST2022Presentation.pptx for an overview of the 
approach and the bugs found in test.c.
